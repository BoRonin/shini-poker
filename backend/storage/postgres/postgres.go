package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"
)

var (
	DB     *sql.DB
	counts int64
)

 const DBTimeout = time.Second * 3

func openDB(dsn string) (*sql.DB, error) {
	db, err := sql.Open("pgx", dsn)
	if err != nil {
		return nil, err
	}
	err = db.Ping()
	if err != nil {
		return nil, err
	}
	return db, nil
}
func ConnectToDB() {
	dsn := os.Getenv("DSN")
	for {
		connection, err := openDB(dsn)
		if err != nil {
			log.Println("Postgress not yet ready...")
			counts++
		} else {
			log.Println("Connected to Postgres")
			SetupDbTable(connection)
			DB = connection
			return
		}
		if counts > 10 {
			log.Println(err)
			return
		}
		log.Println("Waiting for 2 seconds...")
		time.Sleep(time.Second * 2)
		continue
	}
}
func SetupDbTable(conn *sql.DB) {
	game := `SELECT EXISTS 
    (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'game');`
	var result bool
    _ = conn.QueryRowContext(context.Background(), game).Scan(&result)

	if !result {
		stmt := `CREATE TABLE "game" (
	        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	        "title" varchar(20) UNIQUE NOT NULL,
	        "created_at" timestamp,
	        "multiplier" INT
	      );

	      CREATE TABLE "users" (
	        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	        "name" varchar NOT NULL,
"login" varchar UNIQUE NOT NULL,
"password" varchar NOT NULL,
"email" varchar UNIQUE NOT NULL,
	        "created_at" timestamp
	      );

	      CREATE TABLE "combinations" (
	        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	        "name" varchar(20) UNIQUE NOT NULL
	      );

	      CREATE TABLE "wins" (
	        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	        "created_at" timestamp,
	        "player" int NOT NULL,
	        "combination" int
	      );

	      CREATE TABLE "players" (
	        "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	        "user" INT NOT NULL,
	        "game" INT NOT NULL,
	        "chips" int
	      );

	      ALTER TABLE "wins" ADD FOREIGN KEY ("player") REFERENCES "players" ("id");

	      ALTER TABLE "wins" ADD FOREIGN KEY ("combination") REFERENCES "combinations" ("id");

	      ALTER TABLE "players" ADD FOREIGN KEY ("user") REFERENCES "users" ("id");

	      ALTER TABLE "players" ADD FOREIGN KEY ("game") REFERENCES "game" ("id");

	      INSERT INTO combinations (name) VALUES ('high card');
	      INSERT INTO combinations (name) VALUES ('pair');
	      INSERT INTO combinations (name) VALUES ('two pairs');
	      INSERT INTO combinations (name) VALUES ('set');
	      INSERT INTO combinations (name) VALUES ('flush');
	      INSERT INTO combinations (name) VALUES ('full house');
	      INSERT INTO combinations (name) VALUES ('four of a kind');
	      INSERT INTO combinations (name) VALUES ('straight');
	      INSERT INTO combinations (name) VALUES ('straight flush');
	      INSERT INTO combinations (name) VALUES ('royal flush');
	      INSERT INTO combinations (name) VALUES ('all pass');

	`
		_, err := conn.Exec(stmt)
		if err != nil {
			fmt.Printf("couldn't run query:%s", err.Error())
			return
		}

	}

}
